{
  "info": {
    "name": "NNA Registry Service API",
    "description": "API collection for testing the NNA Registry Service",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    pm.expect(jsonData.token).to.exist;",
                  "});",
                  "",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user"
          },
          "response": []
        },
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    pm.expect(jsonData.token).to.exist;",
                  "});",
                  "",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"adminToken\", jsonData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register an admin user"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    pm.expect(jsonData.token).to.exist;",
                  "});",
                  "",
                  "if (jsonData.token) {",
                  "    pm.environment.set(\"userToken\", jsonData.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with user credentials"
          },
          "response": []
        },
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Attempt login with invalid credentials"
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get user profile information"
          },
          "response": []
        },
        {
          "name": "Make User Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/make-admin",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "make-admin"]
            },
            "description": "Make a user an admin (admin only endpoint)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Assets",
      "item": [
        {
          "name": "Create Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = pm.response.json();",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Asset has NNA address\", function () {",
                  "    pm.expect(jsonData.nna_address).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Asset has name\", function () {",
                  "    pm.expect(jsonData.name).to.exist;",
                  "});",
                  "",
                  "if (jsonData.name) {",
                  "    pm.environment.set(\"assetName\", jsonData.name);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/path/to/test-file.mp3"
                },
                {
                  "key": "data",
                  "value": "{\"layer\":\"G\",\"category\":\"POP\",\"subcategory\":\"TSW\",\"source\":\"Test\",\"tags\":[\"test\"],\"description\":\"Test asset\"}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/assets",
              "host": ["{{baseUrl}}"],
              "path": ["assets"]
            },
            "description": "Create a new asset with file upload"
          },
          "response": []
        },
        {
          "name": "Get Asset By Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains asset details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.equal(pm.environment.get(\"assetName\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetName}}",
              "host": ["{{baseUrl}}"],
              "path": ["assets", "{{assetName}}"]
            },
            "description": "Get asset details by name"
          },
          "response": []
        },
        {
          "name": "Search Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains assets array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.assets).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assets?layer=G&category=POP&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["assets"],
              "query": [
                {
                  "key": "layer",
                  "value": "G"
                },
                {
                  "key": "category",
                  "value": "POP"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search assets with filters and pagination"
          },
          "response": []
        },
        {
          "name": "Update Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Asset has updated description\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.description).to.equal(\"Updated test asset\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"description\": \"Updated test asset\",\n    \"tags\": [\"test\", \"updated\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetName}}",
              "host": ["{{baseUrl}}"],
              "path": ["assets", "{{assetName}}"]
            },
            "description": "Update an existing asset"
          },
          "response": []
        },
        {
          "name": "Curate Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetName}}/curate",
              "host": ["{{baseUrl}}"],
              "path": ["assets", "{{assetName}}", "curate"]
            },
            "description": "Curate an asset (admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Asset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/assets/{{assetName}}",
              "host": ["{{baseUrl}}"],
              "path": ["assets", "{{assetName}}"]
            },
            "description": "Delete an asset (admin only)"
          },
          "response": []
        },
        {
          "name": "Batch Upload Assets",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Assets array exists\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": ["/path/to/test-file1.mp3", "/path/to/test-file2.mp3"]
                },
                {
                  "key": "csv",
                  "type": "file",
                  "src": "/path/to/batch-upload.csv"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/assets/batch",
              "host": ["{{baseUrl}}"],
              "path": ["assets", "batch"]
            },
            "description": "Batch upload assets with CSV metadata"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Taxonomy",
      "item": [
        {
          "name": "Validate Taxonomy",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Taxonomy is valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"layer\": \"G\",\n    \"category\": \"POP\",\n    \"subcategory\": \"TSW\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/taxonomy/validate",
              "host": ["{{baseUrl}}"],
              "path": ["taxonomy", "validate"]
            },
            "description": "Validate a taxonomy combination"
          },
          "response": []
        },
        {
          "name": "Get Taxonomy Layers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Layers array exists\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.layers).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/taxonomy/layers",
              "host": ["{{baseUrl}}"],
              "path": ["taxonomy", "layers"]
            },
            "description": "Get all available taxonomy layers"
          },
          "response": []
        },
        {
          "name": "Get Categories For Layer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Categories array exists\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.categories).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/taxonomy/layers/G/categories",
              "host": ["{{baseUrl}}"],
              "path": ["taxonomy", "layers", "G", "categories"]
            },
            "description": "Get all categories for a specific layer"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Storage",
      "item": [
        {
          "name": "Generate Signed URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"URL exists\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.url).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storage/signed-url?fileName=test.mp3&contentType=audio/mp3",
              "host": ["{{baseUrl}}"],
              "path": ["storage", "signed-url"],
              "query": [
                {
                  "key": "fileName",
                  "value": "test.mp3"
                },
                {
                  "key": "contentType",
                  "value": "audio/mp3"
                }
              ]
            },
            "description": "Generate a signed URL for direct upload to GCP"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Documentation",
      "item": [
        {
          "name": "Swagger UI",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/docs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "docs"]
            },
            "description": "Access Swagger documentation UI"
          },
          "response": []
        },
        {
          "name": "API JSON Schema",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/docs-json",
              "host": ["{{baseUrl}}"],
              "path": ["api", "docs-json"]
            },
            "description": "Get JSON schema for Swagger docs"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}