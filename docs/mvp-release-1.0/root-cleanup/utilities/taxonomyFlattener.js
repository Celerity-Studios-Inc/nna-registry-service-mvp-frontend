// taxonomyFlattener.js - Run with Node.js
// Usage: node taxonomyFlattener.js path/to/enriched_nna_layer_taxonomy_v1.3.json

const fs = require('fs');
const path = require('path');

// Get the taxonomy file path from command line args or use default
const taxonomyFilePath = process.argv[2] || './enriched_nna_layer_taxonomy_v1.3.json';
const outputDir = './flattened_taxonomy';

// Layer codes to MFA layer numbers mapping
const LAYER_TO_MFA = {
  'G': '1', // Songs
  'S': '2', // Stars
  'L': '3', // Looks 
  'M': '4', // Moves
  'W': '5', // Worlds
  'B': '6', // Branded
  'P': '7', // Personalize
  'T': '8', // Training_Data
  'R': '9', // Rights
  'C': '10' // Composites
};

// Read the taxonomy JSON file
const rawData = fs.readFileSync(taxonomyFilePath, 'utf8');
const taxonomy = JSON.parse(rawData);

// Create output directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Process each layer
Object.keys(taxonomy).forEach(layerCode => {
  // Skip non-layer properties
  if (!LAYER_TO_MFA[layerCode] || typeof taxonomy[layerCode] !== 'object' || !taxonomy[layerCode].name) {
    return;
  }

  const layer = taxonomy[layerCode];
  const layerMfa = LAYER_TO_MFA[layerCode];
  
  // Initialize lookups
  const lookupTable = {};
  const subcategoriesMap = {};
  
  // Process categories and subcategories
  if (layer.categories) {
    Object.keys(layer.categories).forEach(categoryNumericCode => {
      const category = layer.categories[categoryNumericCode];
      const categoryCode = category.code;
      
      // Ensure numeric code is padded to 3 digits
      const paddedCategoryNumericCode = categoryNumericCode.padStart(3, '0');
      
      // Add to lookup table
      lookupTable[categoryCode] = {
        numericCode: paddedCategoryNumericCode,
        name: category.name
      };
      
      // Initialize subcategories array
      subcategoriesMap[categoryCode] = [];
      
      // Process subcategories
      if (category.subcategories) {
        Object.keys(category.subcategories).forEach(subcategoryNumericCode => {
          const subcategory = category.subcategories[subcategoryNumericCode];
          const subcategoryCode = subcategory.code;
          
          // Ensure numeric code is padded to 3 digits
          const paddedSubcategoryNumericCode = subcategoryNumericCode.padStart(3, '0');
          
          // Add to lookup table
          lookupTable[`${categoryCode}.${subcategoryCode}`] = {
            numericCode: paddedSubcategoryNumericCode,
            name: subcategory.name
          };
          
          // Add to subcategories array
          subcategoriesMap[categoryCode].push(`${categoryCode}.${subcategoryCode}`);
        });
      }
    });
  }
  
  // Generate the TypeScript file content
  const fileContent = `// Generated ${layerCode} layer lookup table
// Contains flattened taxonomy for ${layer.name}

export const ${layerCode}_LAYER_LOOKUP = ${JSON.stringify(lookupTable, null, 2)};

export const ${layerCode}_SUBCATEGORIES = ${JSON.stringify(subcategoriesMap, null, 2)};`;
  
  // Write the file
  const outputFilePath = path.join(outputDir, `${layerCode}_layer.ts`);
  fs.writeFileSync(outputFilePath, fileContent);
  
  console.log(`Generated ${outputFilePath}`);
});

// Generate index.ts to export all layer files
const indexContent = `// This file exports all layer lookup tables
// Generated by taxonomyFlattener.js

export * from './G_layer';
export * from './S_layer';
export * from './L_layer';
export * from './M_layer';
export * from './W_layer';
export * from './B_layer';
export * from './P_layer';
export * from './T_layer';
export * from './R_layer';
export * from './C_layer';`;

fs.writeFileSync(path.join(outputDir, 'index.ts'), indexContent);
console.log(`Generated ${path.join(outputDir, 'index.ts')}`);

// Generate constants.ts to provide layer mappings
const constantsContent = `// This file re-exports layer specific lookups as full objects
import * as lookups from './index';

// Create LAYER_LOOKUPS mapping
export const LAYER_LOOKUPS: Record<string, Record<string, any>> = {
  'G': lookups.G_LAYER_LOOKUP,
  'S': lookups.S_LAYER_LOOKUP,
  'L': lookups.L_LAYER_LOOKUP,
  'M': lookups.M_LAYER_LOOKUP,
  'W': lookups.W_LAYER_LOOKUP,
  'B': lookups.B_LAYER_LOOKUP,
  'P': lookups.P_LAYER_LOOKUP,
  'T': lookups.T_LAYER_LOOKUP,
  'R': lookups.R_LAYER_LOOKUP,
  'C': lookups.C_LAYER_LOOKUP
};

// Create LAYER_SUBCATEGORIES mapping
export const LAYER_SUBCATEGORIES: Record<string, Record<string, string[]>> = {
  'G': lookups.G_SUBCATEGORIES,
  'S': lookups.S_SUBCATEGORIES,
  'L': lookups.L_SUBCATEGORIES,
  'M': lookups.M_SUBCATEGORIES,
  'W': lookups.W_SUBCATEGORIES,
  'B': lookups.B_SUBCATEGORIES,
  'P': lookups.P_SUBCATEGORIES,
  'T': lookups.T_SUBCATEGORIES,
  'R': lookups.R_SUBCATEGORIES,
  'C': lookups.C_SUBCATEGORIES
};`;

fs.writeFileSync(path.join(outputDir, 'constants.ts'), constantsContent);
console.log(`Generated ${path.join(outputDir, 'constants.ts')}`);

console.log('\nAll flattened taxonomy files have been generated successfully!');