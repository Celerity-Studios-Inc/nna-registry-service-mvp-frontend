name: Staging Environment Deploy

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Type of deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - preview

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

jobs:
  staging-deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if they pass)
        run: npm test -- --watchAll=false --passWithNoTests
        continue-on-error: true

      - name: Build staging application
        run: npm run build:staging
        env:
          REACT_APP_ENVIRONMENT: staging
          REACT_APP_BACKEND_URL: https://registry.stg.reviz.dev
          REACT_APP_FRONTEND_URL: https://nna-registry-frontend-stg.vercel.app
          REACT_APP_ENABLE_DEBUG_LOGGING: true
          REACT_APP_ENABLE_PERFORMANCE_MONITORING: true
          REACT_APP_STAGING_BANNER: true
          NODE_ENV: staging
          CI: false

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

      - name: Deploy to Vercel Staging
        run: |
          # Copy staging config to vercel.json for deployment
          cp vercel.staging.json vercel.json
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            # Deploy to staging alias for staging branch pushes
            vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod --yes > deployment-url.txt
          else
            # Deploy as preview for other cases
            vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --yes > deployment-url.txt
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}

      - name: Get deployment URL
        id: deployment
        run: |
          DEPLOYMENT_URL=$(cat deployment-url.txt)
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Test staging deployment
        run: |
          sleep 30  # Wait for deployment to be ready
          DEPLOYMENT_URL="${{ steps.deployment.outputs.url }}"
          echo "Testing deployment at: $DEPLOYMENT_URL"
          
          # Test basic connectivity
          curl -f -s --max-time 30 "$DEPLOYMENT_URL" > /dev/null || (echo "Failed to connect to staging deployment" && exit 1)
          
          # Test API proxy
          curl -f -s --max-time 30 "$DEPLOYMENT_URL/api/health" > /dev/null || echo "API proxy test failed (non-fatal)"
          
          echo "Staging deployment test completed successfully"

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deployment.outputs.url }}';
            const body = `üöÄ **Staging Deployment Ready**
            
            **Environment:** Staging
            **URL:** ${deploymentUrl}
            **Backend:** https://registry.stg.reviz.dev/api
            
            **Test Areas:**
            - [ ] Asset registration workflow
            - [ ] File upload (both small and large files)
            - [ ] Search and browse functionality
            - [ ] Environment banner display
            - [ ] Backend connectivity
            
            **Note:** This is connected to the staging backend with isolated database.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: staging-deploy
    if: always()
    
    steps:
      - name: Notify success
        if: needs.staging-deploy.result == 'success'
        run: |
          echo "‚úÖ Staging deployment completed successfully"
          echo "Staging URL: ${{ needs.staging-deploy.outputs.url }}"
          
      - name: Notify failure
        if: needs.staging-deploy.result == 'failure'
        run: |
          echo "‚ùå Staging deployment failed"
          exit 1